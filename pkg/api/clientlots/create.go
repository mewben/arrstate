package clientlots

import (
	"log"

	"github.com/gofiber/fiber"
	"github.com/mewben/realty278/internal/enums"
	"github.com/mewben/realty278/pkg/errors"
	"github.com/mewben/realty278/pkg/models"
	"go.mongodb.org/mongo-driver/bson"
)

// Create -
// Apply a client to own a lot
func (h *Handler) Create(data *Payload) (*SingleResponse, error) {
	// validate payload
	if err := validate.Struct(data); err != nil {
		log.Println("error validate", err)
		return nil, errors.NewHTTPError(errors.ErrInputInvalid, err)
	}

	// get the lot document
	foundlot := h.DB.FindByID(h.Ctx, enums.CollLots, data.LotID, h.Business.ID)
	if foundlot == nil {
		return nil, errors.NewHTTPError(errors.ErrNotFoundLot)
	}
	lot := foundlot.(*models.LotModel)

	clientlot := models.NewClientLotModel(h.User.ID, h.Business.ID)
	clientlot.LotID = data.LotID
	clientlot.ClientID = data.ClientID
	clientlot.AgentID = data.AgentID
	clientlot.Status = enums.StatusPending
	clientlot.Price = lot.Price + lot.PriceAddon
	clientlot.DownPayment = data.DownPayment
	clientlot.Months = data.Months
	clientlot.Monthly = data.Monthly // TODO: ask if this will be autogenerated or can be entered manually
	clientlot.Date = data.Date
	clientlot.MetaModel = data.MetaModel

	doc, err := h.DB.InsertOne(h.Ctx, enums.CollClientLots, clientlot)
	if err != nil || doc == nil {
		log.Println("insertonerr", err)
		return nil, errors.NewHTTPError(errors.ErrInsert, err)
	}

	// TODO: create hooks
	clientlot = doc.(*models.ClientLotModel)

	// update lot
	lot.Status = enums.StatusPending
	lot.ClientLotID = &clientlot.ID
	updLot := fiber.Map{
		"status":      enums.StatusPending,
		"clientLotID": &clientlot.ID,
	}
	op := bson.D{
		{
			Key:   "$set",
			Value: updLot,
		},
		{
			Key: "$currentDate",
			Value: fiber.Map{
				"updatedAt": true,
			},
		},
	}
	foundlot = h.DB.FindByIDAndUpdate(h.Ctx, enums.CollLots, lot.ID, op)
	if doc == nil {
		return nil, errors.NewHTTPError(errors.ErrUpdate)
	}

	lot = foundlot.(*models.LotModel)

	response := &SingleResponse{
		ClientLot: clientlot,
		Lot:       lot,
	}

	return response, nil
}
